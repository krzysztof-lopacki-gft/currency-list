package com.crypto.recruitmenttest.currencylist.ui.screens.example

import android.os.Bundle
import android.view.View
import androidx.appcompat.app.AppCompatActivity
import androidx.fragment.app.Fragment
import androidx.fragment.app.FragmentManager
import androidx.navigation.fragment.NavHostFragment
import com.crypto.recruitmenttest.common.ui.mvi.MviViewModel
import com.crypto.recruitmenttest.common.ui.mvi.ViewEffect
import com.crypto.recruitmenttest.currencylist.ui.databinding.ActivityDemoBinding
import com.crypto.recruitmenttest.currencylist.ui.screens.list.CurrencyListView
import kotlinx.coroutines.flow.map
import org.koin.androidx.viewmodel.ext.android.viewModel

class DemoActivity : AppCompatActivity() {
    private val viewModel: MviViewModel<CurrenciesListDemoViewState, CurrenciesListDemoViewEvent, CurrenciesListDemoNavigationEffect, ViewEffect> by viewModel<CurrenciesListDemoViewModel>()
    private lateinit var binding: ActivityDemoBinding

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setupView()
        provideDataSourceToCurrencyListView()
    }

    private fun setupView() {
        binding = ActivityDemoBinding.inflate(layoutInflater)
        setContentView(binding.root)
    }

    /**
     * [INFO FOR REVIEWER]
     * A much simpler solution would be to make CurrencyInfo parcelable or serializable
     * and pass the list of CurrencyInfo-s to CurrencyListFragment as a parameter within the nav graph.
     * This solution would work for this specific test task, but only because the provided currency lists are relatively short
     * and the CurrencyInfo model takes up little memory.
     * Note: The current Bundle size limit is roughly 500kb, and considering the overhead generated by serialization itself,
     * it is relatively easy to reach this limit with lists containing just hundreds of complex objects.
     *
     * Another common solution would be to pass only an identifier (Enum/String/Int) to CurrencyListFragment,
     * which would indicate what type of currencies should be displayed,
     * but leave the fetching of these currency data to CurrencyListFragment itself.
     * This would comply with Google's guidelines regarding passing parameters in Intents/Navgraph,
     * where it is suggested to pass as little data as possible.
     * In this test task, this solution cannot be applied because it is required that CurrencyListFragment receives data
     * from an external source.
     *
     * It seems that the task could be most elegantly solved in Compose,
     * where the view can consist of many sub-views to which data is passed in a more declarative manner.
    */
    private fun provideDataSourceToCurrencyListView() {
        val navHostFragment = supportFragmentManager.findFragmentById(binding.navHostFragment.id) as NavHostFragment
        navHostFragment.childFragmentManager.registerFragmentLifecycleCallbacks(object : FragmentManager.FragmentLifecycleCallbacks() {
            override fun onFragmentViewCreated(fragmentManager: FragmentManager, fragment: Fragment, view: View, savedInstanceState: Bundle?) {
                if (fragment is CurrencyListView) {
                    fragment.setDataSource(viewModel.viewStates.map { state -> state.currenciesList })
                }
            }
        }, false)
    }
}
